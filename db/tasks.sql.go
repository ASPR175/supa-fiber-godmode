// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: tasks.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createTask = `-- name: CreateTask :one
INSERT INTO tasks (title,description,user_id)
VALUES ($1,$2,$3)
RETURNING id, title, description, user_id, created_at
`

type CreateTaskParams struct {
	Title       string
	Description pgtype.Text
	UserID      pgtype.UUID
}

func (q *Queries) CreateTask(ctx context.Context, arg CreateTaskParams) (Task, error) {
	row := q.db.QueryRow(ctx, createTask, arg.Title, arg.Description, arg.UserID)
	var i Task
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.UserID,
		&i.CreatedAt,
	)
	return i, err
}

const deleteTask = `-- name: DeleteTask :execrows
DELETE FROM tasks
WHERE id = $1 AND user_id = $2
`

type DeleteTaskParams struct {
	ID     pgtype.UUID
	UserID pgtype.UUID
}

func (q *Queries) DeleteTask(ctx context.Context, arg DeleteTaskParams) (int64, error) {
	result, err := q.db.Exec(ctx, deleteTask, arg.ID, arg.UserID)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected(), nil
}

const getTasksByUserId = `-- name: GetTasksByUserId :many
SELECT id, title, description, user_id, created_at FROM tasks
WHERE user_id = $1
ORDER BY created_at DESC
`

func (q *Queries) GetTasksByUserId(ctx context.Context, userID pgtype.UUID) ([]Task, error) {
	rows, err := q.db.Query(ctx, getTasksByUserId, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Task
	for rows.Next() {
		var i Task
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Description,
			&i.UserID,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
